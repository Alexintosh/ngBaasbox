{"name":"Ngbaasbox","tagline":"An angular wrapper for Baasbox","body":"ngBaasbox\r\n=========\r\n\r\nAn angular wrapper for Baasbox\r\n\r\n# Documentation\r\n\r\n* * *\r\n\r\n### init(url, appcode, session) \r\n\r\nInitialize baasbox\r\n\r\n**Parameters**\r\n\r\n**url**: , Where all api call will be made. This is the base URL with the slash after the url included.\r\nAs an example: www.myServer.com/ or 192.168.1.1:800/\r\n\r\n**appcode**: , The application code you first ran the application with. The default is 1234567890\r\n\r\n**session**: , The session code if it exists.\r\n\r\n\r\n\r\n### signup(user) \r\n\r\nRegisters a new user\r\n\r\n**Parameters**\r\n\r\n**user**: , A JSON object representing a user.\r\n\r\n**Returns**: `*`, A promise, with success containing the data (contains user, signUpDate, X-BB-SESSION).\r\n\r\n\r\n### login(username, password) \r\n\r\nLogin a user\r\n\r\n**Parameters**\r\n\r\n**username**: , the username\r\n\r\n**password**: , the password\r\n\r\n**Returns**: `*`, - A promise, with success containing the data (contains user, signUpDate, X-BB-SESSION).\r\n\r\n\r\n### logout() \r\n\r\nTODO: Implement the pushToken\r\n\r\nLogout the user from the server\r\n\r\n**Returns**: `*`, - Promise, which if a success, returns \"user logged out\"\r\n\r\n\r\n### me() \r\n\r\nRetrieves details about the logged in user\r\n\r\n**Returns**: `*`, - Promise with the user returned\r\n\r\n\r\n### updateProfile(user) \r\n\r\nUpdates the user profile.\r\n\r\n**Parameters**\r\n\r\n**user**: , Is of format: Should have 4 objects of the keys:\r\nvisibleByTheUser, visibleByFriends, visibleByRegisteredUsers, visibleByAnonymousUsers,\r\nwhere any of the 4, or all can be provided.\r\n\r\n**Returns**: `*`, - Promise with the user returned\r\n\r\n\r\n### getSingleUser(username) \r\n\r\nAllows to retrieve information about a user profile\r\n\r\n**Parameters**\r\n\r\n**username**: , Who to fetch\r\n\r\n**Returns**: `*`, - Promise with the user returned\r\n\r\n\r\n### getAllUsers(query) \r\n\r\nRetrieve a list of users. This API supports pagination and query criteria\r\nSee http://www.baasbox.com/documentation/?shell#pagination-and-query-criteria\r\n\r\n**Parameters**\r\n\r\n**query**: , pagination and query criteria\r\n\r\n**Returns**: `*`, - Promise with the users returned\r\n\r\n\r\n### followUser(username) \r\n\r\nFollow a user\r\n\r\n**Parameters**\r\n\r\n**username**: , User to follow\r\n\r\n**Returns**: `*`, - Promise with \"ok\"\r\n\r\n\r\n### unfollowUser(username) \r\n\r\nUnfollow a user\r\n\r\n**Parameters**\r\n\r\n**username**: , User to unfollow\r\n\r\n**Returns**: `*`, - Promise with \"ok\"\r\n\r\n\r\n### fetchFollowing(username) \r\n\r\nFetch the list of users following the user\r\n\r\n**Parameters**\r\n\r\n**username**: , username of the user\r\n\r\n**Returns**: `*`, - Promise of users\r\n\r\n\r\n### fetchFollowers(username) \r\n\r\nGet the list of users the user is following\r\n\r\n**Parameters**\r\n\r\n**username**: , username of the user\r\n\r\n**Returns**: `*`, - Promise of users\r\n\r\n\r\n### addDocument(collectionName, data) \r\n\r\nCreate a new document\r\n\r\n**Parameters**\r\n\r\n**collectionName**: , Which collection to add this document in\r\n\r\n**data**: , Document Data\r\n\r\n**Returns**: `*`, - Promise containing the saved document\r\n\r\n\r\n### getDocument(collectionName, id) \r\n\r\nGet the document using the unique ID\r\n\r\n**Parameters**\r\n\r\n**collectionName**: , The name of the collection\r\n\r\n**id**: , Unique ID to get\r\n\r\n**Returns**: `*`, - Promise containing the document\r\n\r\n\r\n### searchForDocuments(collectionName, query) \r\n\r\nSearch for documents, using some query.\r\n\r\n**Parameters**\r\n\r\n**collectionName**: , The name of the collection\r\n\r\n**query**: , the query to find the documents, for example:\r\nquery = page=0&recordsPerPage=1\r\n\r\n**Returns**: `*`, - Promise containing documents\r\n\r\n\r\n### getDocumentCount(collectionName, query) \r\n\r\nReturns the number of documents that the user can read in a collection\r\n\r\n**Parameters**\r\n\r\n**collectionName**: , The name of the collection\r\n\r\n**query**: , (Optional) The query to apply before returning the result\r\n\r\n**Returns**: `*`, - Promise containing documents\r\n\r\n\r\n### updateDocument(collectionName, id, data) \r\n\r\nUpdates the document with the ID provided in the specified collection\r\n\r\n**Parameters**\r\n\r\n**collectionName**: , The name of the collection\r\n\r\n**id**: , The unique ID of the document\r\n\r\n**data**: , The document data (replaces everything)\r\n\r\n**Returns**: `*`, - Promise containing the document\r\n\r\n\r\n### updateDocumentField(collectionName, id, fieldname, data) \r\n\r\nUpdates a single field of an existing object. The field can be a simple property,\r\na complex JSON object or even an array using the notation\r\n\r\n**Parameters**\r\n\r\n**collectionName**: , The name of the collection\r\n\r\n**id**: , The ID of the document\r\n\r\n**fieldname**: , The name of the field that you want to update\r\n\r\n**data**: , What to update to\r\n\r\n**Returns**: `*`, - Promise containing the document\r\n\r\n\r\n### deleteDocument(collectionName, id) \r\n\r\nDeletes the document with the ID specified in the collection provided as parameter\r\n\r\n**Parameters**\r\n\r\n**collectionName**: , The name of the collection\r\n\r\n**id**: , The ID of the document to delete\r\n\r\n**Returns**: `*`, - Promise containing no returned data\r\n\r\n\r\n### grantPermissionByUser(collectionName, id, action, username) \r\n\r\nGrants permission to the document to a single user\r\n\r\n**Parameters**\r\n\r\n**collectionName**: , The name of the collection\r\n\r\n**id**: , The ID of the document\r\n\r\n**action**: , The grant you want to assign. One of: read, update, delete, all.\r\n\r\n**username**: , The username of the user to whom you want to assign the grant\r\n\r\n**Returns**: `*`, - Promise containing no returned data\r\n\r\n\r\n### grantPermissionByRole(collectionName, id, action, role) \r\n\r\nGrants permission to the document to a single role\r\n\r\n**Parameters**\r\n\r\n**collectionName**: , The name of the collection\r\n\r\n**id**: , The ID of the document\r\n\r\n**action**: , The grant you want to assign. One of: read, update, delete, all.\r\n\r\n**role**: , The name of the role to whom you want to grant the permission\r\nOne of: anonymous, registered, administrator, plus those defined by the administrator\r\n\r\n**Returns**: `*`, - Promise containing no returned data\r\n\r\n\r\n### revokePermissionByUser(collectionName, id, action, username) \r\n\r\nRevokes permission on a document to the user\r\n\r\n**Parameters**\r\n\r\n**collectionName**: , The name of the collection\r\n\r\n**id**: , The ID of the document\r\n\r\n**action**: , The grant you want to revoke. One of: read, update, delete, all.\r\n\r\n**username**: , The username of the user to whom you want to revoke the grant\r\n\r\n**Returns**: `*`, - Promise containing no returned data\r\n\r\n\r\n### revokePermissionByRole(collectionName, id, action, role) \r\n\r\nRevokes permission on a document to the role\r\n\r\n**Parameters**\r\n\r\n**collectionName**: , The name of the collection\r\n\r\n**id**: , The ID of the document\r\n\r\n**action**: , The grant you want to revoke. One of: read, update, delete, all.\r\n\r\n**role**: , The name of the role to whom you want to revoke the permission\r\nOne of: anonymous, registered, administrator, plus those defined by the administrator\r\n\r\n**Returns**: `*`, - Promise containing no returned data\r\n\r\n\r\n### createLink(sourceId, destinationId, label) \r\n\r\nLinks allow to connect documents and files to each other.\r\nTo create a link you must provide the two documents you want to connect and the link name.\r\nSince links have a direction, the first document will be the source node of the link and\r\nthe second one will be the destination node.\r\n\r\n**Parameters**\r\n\r\n**sourceId**: , The ID of the first document or file to link\r\n\r\n**destinationId**: , The ID of the second document or file to link\r\n\r\n**label**: , The link name. Can be any valid string\r\n\r\n**Returns**: `*`, - Promise containing non-writable fields about the link\r\n\r\n\r\n### getLinkById(id) \r\n\r\nGet link by Id\r\n\r\n**Parameters**\r\n\r\n**id**: , Id of the link\r\n\r\n**Returns**: `*`, - Promise containing non-writable fields about the link\r\n\r\n\r\n### queryLink(query) \r\n\r\nGet a single or multiple links using a query.\r\n\r\n**Parameters**\r\n\r\n**query**: , the query.  For example:\r\nwhere=in.name.toLowerCase() like 'john%' and label=\"customer\"\r\n\r\n**Returns**: `*`, - Promise containing an array of links\r\n\r\n\r\n### deleteLink(id) \r\n\r\nDeletes a link\r\n\r\n**Parameters**\r\n\r\n**id**: , Id of the link\r\n\r\n**Returns**: `*`, - Promise containg no data, just \"ok\" if success\r\n\r\n* * *","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}